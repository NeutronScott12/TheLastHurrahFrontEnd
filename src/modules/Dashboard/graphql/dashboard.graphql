fragment ApplicationFields on ApplicationModel {
	id
	application_name
	plan
	cost
	renewal
	created_at
	updated_at
	application_owner {
		id
	}

	moderators {
		email
		username
		id
	}
}

input FetchThreadCommentsById {
	limit: Int!
	skip: Int!
}

query FetchApplicationByName($name: String!, $FetchThreadCommentsById: FetchThreadCommentsById!) {
	find_one_application_by_name(name: $name) {
		...ApplicationFields
		threads {
			application_id
			id
			thread_comments(FetchThreadCommentsById: $FetchThreadCommentsById) {
				comments {
					plain_text_body
					application_id
					author {
						id
						username
					}
				}
			}
		}
	}
}

fragment CommentFragment on CommentModel {
	id
	plain_text_body
	application_id
	author {
		id
		username
	}
}

input FetchCommentsByApplicationIdInput {
	limit: Int!
	skip: Int!
	sort: sort!
	application_id: String!
}

query FetchCommentsByApplicationId(
	$fetchCommentsByApplicationIdInput: FetchCommentsByApplicationIdInput!
) {
	fetch_comments_by_application_id(
		fetchCommentsByApplicationId: $fetchCommentsByApplicationIdInput
	) {
		comments_count
		comments {
			...CommentFragment
		}
	}
}

enum WHERE {
	PENDING
	APPOVED
	SPAM
	DELETED
	ALL
}

input FetchCommentsByApplicationNameInput {
	limit: Int!
	skip: Int!
	sort: sort!
	application_name: String!
	where: WHERE!
}

query FetchCommentsByApplicationName(
	$fetchCommentsByApplicationName: FetchCommentsByApplicationNameInput!
) {
	fetch_comments_by_application_name(
		fetchCommentsByApplicationName: $fetchCommentsByApplicationName
	) {
		comments_count
		comments {
			...CommentFragment
		}
	}
}

query FetchApplicationsByOwner {
	fetch_all_applications {
		...ApplicationFields
	}
}

query FindOneApplicationById($findOneApplicationByIdId: String!) {
	find_one_application_by_id(id: $findOneApplicationByIdId) {
		...ApplicationFields
	}
}

# query FindApplicationModerators()

input CreateApplicationInput {
	application_name: String!
}

mutation CreateApplication($createApplicationInput: CreateApplicationInput!) {
	create_application(createApplicationInput: $createApplicationInput) {
		application_name
		# created_at
	}
}

input RemoveModeratorInput {
	application_id: String!
	moderation_id: String!
}

input AddModeratorInput {
	application_id: String!
	moderation_id: String!
}

mutation RemoveApplicationModerator($removeModeratorInput: RemoveModeratorInput!) {
	remove_application_moderator(removeModeratorInput: $removeModeratorInput) {
		...ApplicationFields
	}
}

mutation AddApplicationModerator($addModeratorInput: AddModeratorInput!) {
	add_application_moderator(addModeratorInput: $addModeratorInput) {
		...ApplicationFields
	}
}

input DeleteManyCommentsInput {
	comments_id: String
}

mutation DeleteManyComments($deleteManyCommentsInput: [DeleteManyCommentsInput!]!) {
	delete_many_comments(deleteManyCommentsInput: $deleteManyCommentsInput) {
		success
		message
	}
}
