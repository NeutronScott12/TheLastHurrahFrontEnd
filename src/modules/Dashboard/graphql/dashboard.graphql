fragment ApplicationFields on ApplicationModel {
	id
	application_name
	plan
	cost
	renewal
	short_name
	created_at
	updated_at
	auth_secret
	application_name
	links_in_comments
	email_mods_when_comments_flagged
	allow_images_and_videos_on_comments
	pre_comment_moderation
	display_comments_when_flagged
	website_url
	category
	language
	theme
	adult_content
	comment_policy_url
	comment_policy_summary
	description
	default_avatar_url
	application_owner {
		id
	}
	moderators {
		email
		username
		id
	}
}

input FetchCommentsByApplicationShortNameInput {
	limit: Int!
	skip: Int!
	sort: sort!
	application_short_name: String!
	where: WHERE!
}

query FetchCommentsByApplicationByShortName(
	$fetchCommentsByApplicationShortNameInput: FetchCommentsByApplicationShortNameInput!
) {
	fetch_comments_by_application_short_name(
		fetchCommentsByApplicationShortNameInput: $fetchCommentsByApplicationShortNameInput
	) {
		comments_count
		comments {
			...CommentFragment
		}
	}
}

input FetchApplicationByShortNameInput {
	short_name: String!
}

query FetchApplicationByShortName(
	$fetchApplicationByShortNameInput: FetchApplicationByShortNameInput!
) {
	fetch_application_by_short_name(
		fetchApplicationByShortNameInput: $fetchApplicationByShortNameInput
	) {
		...ApplicationFields
	}
}

input FetchNotificationByApplicationShortNameInput {
	short_name: String!
}

query FetchNotificationByApplicationShortName(
	$fetchNotificationByApplicationShortNameInput: FetchNotificationByApplicationShortNameInput!
) {
	fetch_notifications_by_short_name(
		fetchNotificationByApplicationShortNameInput: $fetchNotificationByApplicationShortNameInput
	) {
		id
		created_at
		updated_at
		message
		url
	}
}

input FetchThreadCommentsById {
	limit: Int!
	skip: Int!
}

query FetchApplicationByName($name: String!) {
	find_one_application_by_name(name: $name) {
		...ApplicationFields
	}
}

fragment CommentFragment on CommentModel {
	id
	plain_text_body
	application_id
	created_at
	updated_at
	author {
		id
		username
	}
}

input FetchCommentsByApplicationIdInput {
	limit: Int!
	skip: Int!
	sort: sort!
	application_id: String!
}

query FetchCommentsByApplicationId(
	$fetchCommentsByApplicationIdInput: FetchCommentsByApplicationIdInput!
) {
	fetch_comments_by_application_id(
		fetchCommentsByApplicationId: $fetchCommentsByApplicationIdInput
	) {
		comments_count
		comments {
			...CommentFragment
		}
	}
}

enum WHERE {
	PENDING
	APPOVED
	SPAM
	DELETED
	ALL
}

# input FetchCommentsByApplicationNameInput {
# 	limit: Int!
# 	skip: Int!
# 	sort: sort!
# 	application_name: String!
# 	where: WHERE!
# }

# query FetchCommentsByApplicationName(
# 	$fetchCommentsByApplicationName: FetchCommentsByApplicationNameInput!
# ) {
# 	fetch_comments_by_application_name(
# 		fetchCommentsByApplicationName: $fetchCommentsByApplicationName
# 	) {
# 		comments_count
# 		comments {
# 			...CommentFragment
# 		}
# 	}
# }

query FetchApplicationsByOwner {
	fetch_all_applications {
		...ApplicationFields
	}
}

query FindOneApplicationById($findOneApplicationByIdId: String!) {
	find_one_application_by_id(id: $findOneApplicationByIdId) {
		...ApplicationFields
	}
}

# query FindApplicationModerators()

input CreateApplicationInput {
	application_name: String!
}

mutation CreateApplication($createApplicationInput: CreateApplicationInput!) {
	create_application(createApplicationInput: $createApplicationInput) {
		application_name
		short_name
		# created_at
	}
}

input RemoveModeratorInput {
	application_id: String!
	moderation_id: String!
}

input AddModeratorInput {
	application_id: String!
	moderation_id: String!
}

mutation RemoveApplicationModerator($removeModeratorInput: RemoveModeratorInput!) {
	remove_application_moderator(removeModeratorInput: $removeModeratorInput) {
		...ApplicationFields
	}
}

mutation AddApplicationModerator($addModeratorInput: AddModeratorInput!) {
	add_application_moderator(addModeratorInput: $addModeratorInput) {
		...ApplicationFields
	}
}

input DeleteManyCommentsInput {
	comment_ids: String
	permanent_delete: Boolean!
}

mutation DeleteManyComments($deleteManyCommentsInput: DeleteManyCommentsInput!) {
	delete_many_comments(deleteManyCommentsInput: $deleteManyCommentsInput) {
		success
		message
	}
}

input UpdateApplicationCommentRulesInput {
	application_short_name: String!
	links_in_comments: Boolean!
	email_mods_when_comments_flagged: Boolean!
	display_comments_when_flagged: Boolean!
	allow_images_and_videos_on_comments: Boolean!
	pre_comment_moderation: pre_comment_moderation!
}

mutation UpdateApplicationCommentRules(
	$updateApplicationCommentRulesInput: UpdateApplicationCommentRulesInput!
) {
	update_application_comment_rules(
		updateApplicationCommentRulesInput: $updateApplicationCommentRulesInput
	) {
		id
		application_name
		links_in_comments
		email_mods_when_comments_flagged
		allow_images_and_videos_on_comments
		pre_comment_moderation
		display_comments_when_flagged
	}
}

input UpdateApplicationInput {
	application_short_name: String!
	website_url: String!
	category: CATEGORY!
	language: LANGUAGE!
	theme: THEME!
	adult_content: Boolean!
	comment_policy_url: String
	comment_policy_summary: String
	description: String
	default_avatar_url: String
	id: String!
}

mutation UpdateApplication($updateApplicationInput: UpdateApplicationInput!) {
	update_application(updateApplicationInput: $updateApplicationInput) {
		...ApplicationFields
	}
}

input ApproveCommentsInput {
	comment_ids: [String!]!
}

mutation ApproveComment($approveCommentsInput: ApproveCommentsInput!) {
	approve_comments(approveCommentsInput: $approveCommentsInput) {
		success
		message
	}
}

enum CHOICE {
	ALL
	BLOCKED
	REMOVED
}

input AuthenticatedUserInput {
	choice: CHOICE!
	limit: Int!
	skip: Int!
}

query FetchApplicationAuthenticatedUsers(
	$fetchApplicationByShortNameInput: FetchApplicationByShortNameInput!
	$authenticatedUserInput: AuthenticatedUserInput!
) {
	fetch_application_by_short_name(
		fetchApplicationByShortNameInput: $fetchApplicationByShortNameInput
	) {
		authenticated_users(authenticatedUserInput: $authenticatedUserInput) {
			confirmed
			last_active
			username
			two_factor_authentication
			id
			created_at
		}
	}
}

input BlockUserFromApplicationInput {
	application_id: String!
	user_ids: [String!]!
}

mutation BlockUsersFromApplication($blockUsersFromApplication: BlockUserFromApplicationInput!) {
	block_users_from_application(blockUsersFromApplication: $blockUsersFromApplication) {
		...ApplicationFields
	}
}

input UnBlockUserFromApplicationInput {
	application_id: String!
	user_ids: [String!]!
}

mutation UnBlockUsersFromApplication(
	$unBlockUsersFromApplication: UnBlockUserFromApplicationInput!
) {
	unblock_users_from_application(unBlockUsersFromApplication: $unBlockUsersFromApplication) {
		...ApplicationFields
	}
}

input FetchCommentStatsInput {
	start_date: DateTime!
	end_date: DateTime!
}

query FetchCommentStats($fetchCommentStatsInput: FetchCommentStatsInput!) {
	fetch_comment_stats(fetchCommentStatsInput: $fetchCommentStatsInput) {
		comments_per_day {
			count
			date
		}
	}
}
